/* PENTEST-attack-surface.sc
 *
 * Version: 0.0.1
 * Ocular Version: 0.3.34
 * Author: Chetan Conikee <chetan@shiftLeft.io>
 * Execution-mode : Internal
 * Input: Application CPG
 * Output: JSON
 * 
 * Description: 
 * The following script is intended to be used for a web application (such 
 * as a SpringBoot or a Java Web Servlet) which exposes certain web-routes. 
 * It goes through the applicationâ€™s CPG and lists the attack surface which 
 * includes the web-routes, the handler methods for those routes as well as  
 */

import $ivy.`io.circe::circe-core:0.10.0`
import $ivy.`io.circe::circe-generic:0.10.0`
import $ivy.`io.circe::circe-parser:0.10.0`
import $ivy.`io.circe::circe-optics:0.10.0`

// JSON utilities, cursors and decoders 
import io.circe.parser
import io.circe.generic.semiauto.deriveDecoder
import io.circe.generic.auto._
import io.circe.parser._, io.circe.syntax._
import io.circe.Json
import cats.syntax.either._
import io.circe.optics.JsonPath._


case class Surface(route : String, source : String, sinks : List[String])
case class AttackSurface(surface : List[Surface])

implicit val recordsDecoder = deriveDecoder[AttackSurface]

// At runtime when the script file is imported, the following method is made 
// available on the Ocular shell. It takes in the cpg object and returns 
// JSON report of attack surface 
def getAttackSurface(cpg: io.shiftleft.codepropertygraph.Cpg) : String = {
    val surfaceList = cpg.finding.ioFlow.primaryFlow.map { x =>
    
    Surface(x.source.method.start.definingTypeDecl.annotation.parameterAssign.value.code.l.filter(_.contains("[")).headOption.getOrElse(""),
                x.source.method.fullName,
                List(x.sink.method.fullName))}.l.filter(!_.route.equals(""))

    val attackSurface = AttackSurface(surfaceList)

    attackSurface.asJson.spaces2
}

@doc("")
@main def execute(jarFile: String, outFile: String) : Boolean = {
    
    println("[+] Verify if CPG exists") 
    if(workspace.baseCpgExists(jarFile)) {

        println("[+] Creating CPG and SP for " + jarFile) 
        createCpgAndSp(jarFile)

        println("[+] Verify if CPG was created successfully") 
        if(!workspace.baseCpgExists(jarFile)) {
            println("Failed to create CPG for " + jarFile)
            return false
        }

        println("[+] Check if CPG is loaded")
        if(workspace.loadedCpgs.toList.size == 0) {
            println("Failed to load CPG for " + jarFile)
            return false
        } else {

            val writer = new java.io.PrintWriter(new java.io.File(outFile))
            writer.write(getAttackSurface(cpg))
            writer.close()
            
            printf("[+] Saving results to %s\n", outFile)
            
            return true
        }
    } else {
        return false
    }
}
